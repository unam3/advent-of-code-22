Part 1.


Implement instruction parsing in parseInput.

Implement execute function.

Track cycles during execution.

Implement getSignalStrength.

Implement function which will took the number of cycles, executeInstructions and get the signal strength for specified
numbers of cycles.

Extend State type synonym to (RegisterXValue, CycleNumber, [(CycleNumber, Maybe Int)] and inject getSignalStrength into
executeInstrucitons?


For now consider the signal strength (the cycle number multiplied by the value of the X register).

Find the signal strength during the 20th, 60th, 100th, 140th, 180th, and 220th cycles.

What is the sum of these six signal strengths?


Prediction: in Part II cycles will be messed up somehow.


Part II.

X register controls the horizontal position of a sprite: the sprite is 3 pixels wide, and the X register sets the
horizontal position of the middle of that sprite.

The CRT draws a single pixel during each cycle.

The left-most pixel in each row is in position 0, and the right-most pixel in each row is in position 39.

If the sprite is positioned such that one of its three pixels is the pixel currently being drawn, the screen produces a
lit pixel (#); otherwise, the screen leaves the pixel dark (.).

|— position 0, cycle 1
||— position 1, cycle 2
||
###..................................... initial sprite position X = 1 => C 2


               |— position 15, cycle 16
               ||— position 16, cycle 17
               ||
...............###...................... X = 16 => C 17


Collect "image" from first 240 cycles of input instructions execution.

How to represent this image? [Bool]? Vector Bool? Monoid [Bool]? [Bool]

Need a map instruction to cycleNumber to tell on which instructions executeII fails: mapCycleNumbers.

cycleNumber should be zeroed after 40 each time.
getAdjustedCycleNumber: mod 40


Render the image given by your program.

What eight capital letters appear on your CRT?
