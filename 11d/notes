Part I.

parseInput.

Split input to sections for each monkey. ../05d/src/SupplyStacks: group and splitByEmptyLines.

Parse each monkey section and add to InputData accumulator with foldl'.

worry level
    -> inspection
    -> worry level modified with operation after monkey inspected an item
    -> relief: worry level to be divided by three and rounded down to the nearest integer
    -> test

On a single monkey's turn, it inspects and throws all of the items it is holding one at a time and in the order listed.

If a monkey is holding no items at the start of its turn, its turn ends.

How to implement throwing?
We always throw all tthe items, so we can just use empty list for current monkey.

Monkey 0 goes first, then monkey 1, and so on until each monkey has had one turn.

Why items that were thrown to monkey 3 doesn't end up in monkey 1 items?
Because ifoldl' uses initial inputData, and not accumulator one.

Will we encounter throwing to current monkey itself? Need to add error throw in this case. Done.

The process of each monkey taking a single turn is called a round.

How many items monkeys inspected? Need to collect this. In the state? Sure.

monkey business = multiplication of the numbers two most active monkeys inspected items.

Figure out which monkeys to chase by counting how many items they inspect over 20 rounds.
What is the level of monkey business after 20 rounds?



Part II.

Having run out of RAM with current implementation. Need to optimize.


Strategy 1. Analyze operations on worry levels between inspections by collecting original value modifiers.

Base method: grep -n -A 1 -B 1 True dump_* | column -t > grepped

grep -n -A 1 -B 1 sqr dump_* | column -t > grepped_sqr

1) Before sqr() always goes True? Yes (if it's not the first inspection).
2) When we have series of sqr() and then non-sqr True there can't be another sqr()? Nope. dump_98 has sqr after (sqr,
pluh) series.


Â· True after sqr() on non-sqr() operation:

dump_54  dump_60  dump_65  dump_74  dump_74_suffix  dump_75  dump_79  dump_79_suffix  dump_97  dump_98
    
    x       v       v        x          x               x       v           v            x          v


-) In which cases except before sqr() we {, always} get True?


Strategy 2. Use divisibility rules.

https://en.wikipedia.org/wiki/Divisibility_rule#Divisibility_rules_for_numbers_1%E2%80%9330
https://brilliant.org/wiki/divisibility-rules/#intermediate-divisibility-rules

Current implementation is too slow. What if we try "-exe: with -threaded?. Slow too:
stack ghc -- -Wall -O2 -threaded  app/Main.hs && stack exec -- $(pwd)/app/Main +RTS -N4


Operations on worry levels: (1) addition, (2) multiplications and (3) exponentiation.

grep Test input.txt 
  Test: divisible by 3
  Test: divisible by 17
  Test: divisible by 2
  Test: divisible by 19
  Test: divisible by 11
  Test: divisible by 5
  Test: divisible by 13
  Test: divisible by 7

grep Test testInput
  Test: divisible by 23
  Test: divisible by 19
  Test: divisible by 13
  Test: divisible by 17


Strategy 3. Run rounds on each item individually. Will help gather more info.

The most puzzling one is with 98 initial worry level of the fourth monkey ("3"), because it has non-sqr() True between sqr()s.
